---
// import type { MarkdownInstance } from 'astro';
import { getCollection, render, type CollectionEntry } from "astro:content";

// export async function getStaticPaths() {
//   const posts: MarkdownInstance<Record<string, any>>[] = await Astro.glob('./*.md');
//   return posts.map(post => {
//     const resName = post.url || post.file;
//     const slug = resName.split('/').pop()?.replace(/\.md$/, '');
//     return {
//       params: { slug },
//       props: { post },
//     };
//   });
// }

export async function getStaticPaths() {
	const posts = await getCollection("blog");
	return posts.map((post) => ({
		params: { slug: post.id },
		props: post,
	}));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
// const { Content } = await post.default(Astro.props, {}, {});
const { Content } = await render(post);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{post.data.title || 'Blog Post'}</title>
  </head>
  <body>
    <a href="/">‚Üê Back to Home</a>

    <article>
      <h1>{post.data.title}</h1>
      {post.data.pubDate && <time>{post.data.pubDate}</time>}

      <Content />
    </article>
  </body>
</html>
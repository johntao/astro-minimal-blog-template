---
interface Props {
  slug: string;
}
const { slug } = Astro.props;
---
<div
  x-data={`viewCounter('${slug}')`}
>
  Views:
  <span x-show="loading" x-cloak>Loading...</span>
  <span x-show="!loading && error" x-cloak x-bind:title="error">--</span>
  <span x-show="!loading && !error" x-cloak x-text="views?.toLocaleString() || '0'"></span>
</div>
<script>
  window.Alpine.data('viewCounter', (slug: string) => ({
    views: null,
    loading: true,
    error: '',
    async fetchViews() {
      try {
        this.loading = true;
        const response = await fetch(`/api/views/${encodeURIComponent(slug)}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch view count: ${response.statusText}`);
        }
        const data = await response.json();
        this.views = data.count;
      } catch (err) {
        this.error = err instanceof Error ? err.message : 'An error occurred';
        console.error('Error fetching view count:', err);
      } finally {
        this.loading = false;
      }
    },
    init() {
      this.fetchViews();
    }
  }));
</script>
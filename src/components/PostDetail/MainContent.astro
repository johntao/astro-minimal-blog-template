---
import ViewCounter from "./ViewCounter.astro";
import ClockIcon from "@/icons/svg/ClockIcon.astro";
import BookIcon from "@/icons/svg/BookIcon.astro";
import readingTime from "reading-time";
import type { CollectionEntry } from "astro:content";
import type { AstroComponentFactory } from "astro/runtime/server/index.js";

// MainContent component for the post detail center section
type Props = { post: CollectionEntry<"blog"> , Content: AstroComponentFactory };
const { post, Content } = Astro.props;
const slug = Astro.params.slug || post.id;

// Calculate reading time
const readingStats = readingTime(post.body ?? '');
const readingMinutes = Math.ceil(readingStats.minutes);
---


<h1 class="text-center font-bold text-4xl mt-0 mb-5">{post.data.title}</h1>
<article class="prose prose-sm mx-auto">
  <!-- <h1 class="text-center">{post.data.title}</h1> -->
  <div class="meta-line flex items-center gap-4 justify-center text-sm text-secondary-text mb-6">
    <ViewCounter slug={slug} />
    |
    {post.data.pubDate && (
      <time title="Published Date" datetime={post.data.pubDate.toISOString()}>
        <ClockIcon size={16} />
        {post.data.pubDate.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        })}
      </time>
    )}
    |    
    <div title="Reading Time">
      <BookIcon size={16} />
      {readingMinutes} min read
    </div>
  </div>

  <div class="prose-headings:scroll-mt-20 prose-a:underline-offset-2 prose-img:rounded-lg prose-img:shadow-md">
    <Content />
  </div>
</article>
<style>
  article {
    .meta-line svg {
      display: inline;
      vertical-align: text-top;
    }
  }
</style>
<script>
  const articleEl = document.querySelector("article.prose");
  if (articleEl) {
    articleEl.addEventListener("click", async (event) => {
      const target = event.target as HTMLAnchorElement;
      if (!target) return;
      switch (target.parentElement?.tagName) {
        case 'H2':
        case 'H3':
        case 'H4':
          break;
        default:
          return;
      }
      const link = target.href;
      await navigator.clipboard.writeText(link);
      console.log(`Copied to clipboard: ${link}`);
      
      // Use the global showToast function from the shared Toast component
      window.showToast("Link Copied");
    });
  }
</script>
---
import type { MarkdownHeading } from "astro";
import Link from "@/components/LinkHeadless.astro";
// TOC (Table of Contents) component for the post detail left section
// This component will extract headings from the post content and display them as a table of contents
interface Props {
  headings: MarkdownHeading[];
  class?: string;
}
const { headings } = Astro.props;
// Check if there are any h1 headings (depth === 1)
const hasH1Headings = headings.some((heading) => heading.depth === 1);
if (hasH1Headings) {
  throw new Error(
    "TOC component does not support h1 headings (depth === 1). Only h2-h4 are supported.",
  );
}
---
<h2 class="text-base text-center font-semibold mb-4 pb-2 border-b">
  Table of Contents
</h2>
<ul class="space-y-1">
  {
    headings.map((heading) => (
      <li>
        <Link
          href={`#${heading.slug}`}
          class:list={[
            "hover:underline hover:text-cl-link_strong block py-0.5 text-xs",
            { "pl-0": heading.depth === 2 },
            { "pl-3": heading.depth === 3 },
            { "pl-6": heading.depth === 4 },
          ]}
          data-slug={heading.slug}
        >
          {heading.text}
        </Link>
      </li>
    ))
  }
</ul>
<script>
  // Intersection Observer to highlight current heading in TOC
  document.addEventListener("DOMContentLoaded", () => {
    const _nav = document.querySelector("aside > nav")!;
    const _navTop = _nav!.getBoundingClientRect().top + 8;
    const _navBot = window.innerHeight - _navTop - 8;
    const _headings = [...document.querySelectorAll<HTMLHeadingElement>("article h2, article h3, article h4")]
      .map(heading => [heading.id, heading] as const);
    const rights = new Map<string, HTMLHeadingElement>(_headings);
    const _links = [..._nav.querySelectorAll<HTMLAnchorElement>("a")]
      .map(link => [link.dataset.slug!, link] as const);
    const lefts = new Map<string, HTMLAnchorElement>(_links);
    let currentActive: HTMLAnchorElement | undefined = undefined;
    const observer = new IntersectionObserver(entries => {
      let visibleEntries = entries
        .filter(entry => entry.isIntersecting)
        .sort((a, b) => a.boundingClientRect.top - b.boundingClientRect.top);
      if (!visibleEntries.length) return;
      if (currentActive) currentActive.classList.remove("text-cl-link_strong", "font-medium");
      const topMost = visibleEntries[0];
      const link = lefts.get(topMost.target.id);
      link?.classList.add("text-cl-link_strong", "font-medium");
      currentActive = link;
    }, {
      rootMargin: `-${_navTop}px 0px -${_navBot}px 0px`, // a tiny 16px height viewport
      threshold: 0,
    });
    rights.forEach(heading => observer.observe(heading));
  });

</script>
